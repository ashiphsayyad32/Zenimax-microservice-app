name: React App CI/CD Pipeline

# Trigger the workflow on push to main branch or manually
on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Set permissions for OIDC token
permissions:
  id-token: write # Required for OIDC
  contents: read  # Required to checkout repository
  pull-requests: write # For PR comments

# Set environment variables
env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: './frontend'

# Define jobs
jobs:
  # Security scanning job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Run dependency security scan
      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm audit --production --audit-level=high
          
      # Scan for secrets
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@v3.63.2
        with:
          path: ${{ env.WORKING_DIRECTORY }}
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  # Build and test job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
      
      # Install dependencies
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
      
      # Check for outdated dependencies
      - name: Check dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm outdated || true
      
      # Lint code
      - name: Lint code
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint || echo "Linting not configured, skipping"
      
      # Run tests with coverage
      - name: Run tests with coverage
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm test -- --coverage --passWithNoTests
      
      # Upload test coverage report
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage
          retention-days: 7
      
      # Build the application
      - name: Build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
      
      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: ${{ env.WORKING_DIRECTORY }}/build
          retention-days: 1

  # Deploy job
  deploy:
    name: Deploy to AWS S3
    needs: build-and-test
    runs-on: ubuntu-latest
    # Define environment based on input or default to production
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Download build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ${{ env.WORKING_DIRECTORY }}/build
      
      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Deploy to S3
      - name: Deploy to S3
        run: |
          aws s3 sync ${{ env.WORKING_DIRECTORY }}/build/ s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --delete \
            --cache-control "max-age=86400" \
            --exclude "*.html" \
            --exclude "service-worker.js"
          
          # Upload HTML and service worker files with no-cache headers
          aws s3 sync ${{ env.WORKING_DIRECTORY }}/build/ s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --exclude "*" \
            --include "*.html" \
            --include "service-worker.js" \
            --cache-control "no-cache,no-store,must-revalidate"
      
      # Invalidate CloudFront cache (if using CloudFront)
      - name: Invalidate CloudFront cache
        if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      # Comment on PR with deployment URL
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            const deploymentUrl = 'https://${{ secrets.S3_BUCKET_NAME }}.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com/';
            
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `ðŸš€ Deployed to ${deploymentUrl}`
            });
