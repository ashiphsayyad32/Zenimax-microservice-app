name: Python Service CI/CD Pipeline

on:
  push:
    branches: [ raj-feature ]
    paths:
      - 'python-service/**'
      - '.github/workflows/python-deploy.yml'
  pull_request:
    branches: [ raj-feature ]
    paths:
      - 'python-service/**'
      - '.github/workflows/python-deploy.yml'
  
permissions:
    id-token: write
    contents: read


jobs:
  # CI job
  CI:
    runs-on: ubuntu-latest
                       
    # Checkout code from the repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          cd python-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Make sure flask-cors is installed
          pip install flask-cors
      
      # Run unit tests and coverage report
      - name: Run Unit Tests and generate coverage report
        run: |
          cd python-service
          python -m pytest tests/ -v
          python -m pip install coverage
          coverage run -m pytest tests/
          coverage report -m
          coverage xml -o coverage.xml
      
      # Upload coverage report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: python-service/coverage.xml
          retention-days: 7
      # Build trust between GitHub and AWS using OIDC connector
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ARN_PYTHON }}
          role-session-name: samplesession
          aws-region: ${{ secrets.AWS_REGION }}

      # Authenticate AWS with Docker to interact with an Amazon ECR registry
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID_RAJ}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      

    # Build the Docker image using Dockerfile & tag it with commit SHA, & push it to ECR repository
      - name: Build Docker Image
        run: |
          cd python-service
          docker build -t python:${{ github.sha }} .
          docker tag python:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID_RAJ}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME_PYTHON }}:${{ github.sha }}

    # Run Trivy vulnerability scanner on specified Docker image in the ECR repository
      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.AWS_ACCOUNT_ID_RAJ}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME_PYTHON }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

    # Display boolean value(true/false) depending on the scan report that is received from previous step
      - name: Detected vulnerabilities
        if: steps.trivy-scan.outcome == 'failure'
        run: |
          echo "Vulnerability scan failed!"

    # Display boolean value(true/false) depending on the scan report that is received from previous step
      - name: No vulnerabilities detectedd
        if: steps.trivy-scan.outcome == 'success'
        run: |
          echo "Vulnerability scan succeeded!"

    # Push Docker image to Amazon ECR
      - name: push docker imagee
        run: |
            docker push ${{ secrets.AWS_ACCOUNT_ID_RAJ}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME_PYTHON }}:${{ github.sha }}


 # CD job
        # deploy:
        #   # needs: CI  # This ensures that the deployment process only runs when the Docker image has been successfully built and pushed to Amazon ECR
        #   # runs-on: self-hosted
        #   steps:
        #     - name: Checkout Repository
        #       uses: actions/checkout@v2

      # # Configure AWS credentials using OIDC
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: ${{ secrets.AWS_IAM_ARN_PYTHON }}
      #     role-session-name: 
      #     aws-region: ${{ secrets.AWS_REGION }}

      # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

    # Update Deployment YAML with the new image and Deploy image to EKS 
      - name: Update Deployment YAML with New Image
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
          IMAGE="${{ secrets.PYTHON_IMAGE_NAME }}:${{ github.sha }}"
          sed -i "s|image: .*|image: $IMAGE|" k8s/python-service/deployment.yaml
          cd k8s/python-service
          kubectl apply -f configmap.yaml --validate=false
          kubectl apply -f secret.yaml --validate=false
          kubectl apply -f deployment.yaml --validate=false
          kubectl apply -f service.yaml --validate=false
          kubectl get pods
          kubectl get svc


  # # Post-deployment cleanup
  #     - name: Post-Deployment Cleanup
  #       run: |
  #         chmod -R 755 /home/ubuntu/actions-runner
  #         chown -R ubuntu:ubuntu /home/ubuntu/actions-runner
  #       if: success()  # Only run this step if the previous steps were successful